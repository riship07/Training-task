1. git verify
2. git add A.txt
   git commit -m "Commit A.txt file"
3. git reset A.txt
   git commit -m "Commit B.txt file"
4. echo *.o >> .gitignore
   echo *.exe >> .gitignore
   echo *.jar >> .gitignore
   echo libraries/ >> .gitignore
   git add .gitignore
   git commit -m "Ignore files"
5. git merge escaped
6. git merge another-piece-of-work
   echo 2+3=5 > equation.txt         //manually resolves merge conflict in file.
   git add equation.txt
   git commit --no-edit
7. git stash                         //save current work in local.
   # fix a bug
   git commit -am "Fix a bug"
   git stash pop                     //get back old file which was stash.
   echo "Finally, finished it!" >> bug.txt
   git commit -am "Finish my work"
8. git rebase hot-bugfix
9. git rm ignored.txt
   git commit -am "Remove the file that should have been ignored"
10. git mv File.txt file.txt
    git commit -am "Lowercase file.txt"
11. # fix the typo in the file
    git commit -a --amend
    # fix the typo in commit message
12. git commit --amend --no-edit --date="1987-08-03"
13. git rebase -i HEAD~2
    # mark the first commit with "edit" command
    # fix the typo in the file
    git add file.txt
    git rebase --continue
    # fix the typo in the commit message
14. git reflog
    git reset --hard HEAD@{1}
15. git reset HEAD^
    git add first.txt
    git commit -m "First.txt"
    git add second.txt
    git commit -m "Second.txt"
16. git rebase -i HEAD~2
    # "squash" the second commit
17. git add --chmod=+x script.sh
18. git add -p file.txt
    # split a file then
    # choose lines to include with 'y'
    git commit -m "First part of changes"
    git commit -am "The rest of the changed"
19. git cherry-pick feature-a
    git cherry-pick feature-b
    git cherry-pick feature-c
    # resolve merge conflict
    git add -A
    git cherry-pick --continue
20. git rebase --onto your-master issue-555 rebase-complex
21. git rebase -i HEAD~2
    # move the second commit up



